/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { HumanloopApi } from "@fern-api/humanloop";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Client {
    interface Options {
        environment?: environments.HumanloopApiEnvironment | string;
        apiKey?: core.Supplier<string>;
    }
}

export class Client {
    constructor(private readonly options: Client.Options) {}

    /**
     * Trigger the fine-tuning process for a specific base model and data snapshot.
     */
    public async fineTune(
        projectId: string,
        request: HumanloopApi.FineTuneModelRequest
    ): Promise<HumanloopApi.FineTunedModelResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.HumanloopApiEnvironment.Production,
                `/projects/${projectId}/fine-tune`
            ),
            method: "POST",
            headers: {
                "X-API-KEY": await core.Supplier.get(this.options.apiKey),
            },
            body: await serializers.model.fineTune.Request.json({
                name: request.name,
                dataSnapshot: request.dataSnapshot,
                config: request.config,
                providerApiKeys: request.providerApiKeys,
            }),
        });
        if (_response.ok) {
            return await serializers.model.fineTune.Response.parse(
                _response.body as serializers.model.fineTune.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HumanloopApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HumanloopApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HumanloopApiTimeoutError();
            case "unknown":
                throw new errors.HumanloopApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Get a list of all fine-tuned models associated to a given project.
     */
    public async getFineTunedModels(projectId: string): Promise<HumanloopApi.FineTunedModelResponse[]> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.HumanloopApiEnvironment.Production,
                `/projects/${projectId}/models/fine-tuned`
            ),
            method: "GET",
            headers: {
                "X-API-KEY": await core.Supplier.get(this.options.apiKey),
            },
        });
        if (_response.ok) {
            return await serializers.model.getFineTunedModels.Response.parse(
                _response.body as serializers.model.getFineTunedModels.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HumanloopApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HumanloopApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HumanloopApiTimeoutError();
            case "unknown":
                throw new errors.HumanloopApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Updates your fine-tuned models.
     * Uses the specified provider API keys for provider-specific details.
     */
    public async updateMultiple(
        projectId: string,
        request: HumanloopApi.UpdateFineTunedModelsRequest
    ): Promise<HumanloopApi.UpdateFineTunedModelsResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.HumanloopApiEnvironment.Production,
                `/projects/${projectId}/models/fine-tuned/update`
            ),
            method: "POST",
            headers: {
                "X-API-KEY": await core.Supplier.get(this.options.apiKey),
            },
            body: await serializers.model.updateMultiple.Request.json({
                providerApiKeys: request.providerApiKeys,
            }),
        });
        if (_response.ok) {
            return await serializers.model.updateMultiple.Response.parse(
                _response.body as serializers.model.updateMultiple.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HumanloopApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HumanloopApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HumanloopApiTimeoutError();
            case "unknown":
                throw new errors.HumanloopApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Modifies user-specified attributes of the specified fine-tuned models.
     */
    public async update(
        projectId: string,
        id: string,
        request: HumanloopApi.UpdateFineTunedModelRequest
    ): Promise<HumanloopApi.UpdateFineTunedModelResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.HumanloopApiEnvironment.Production,
                `/projects/${projectId}/models/fine-tuned/${id}`
            ),
            method: "PATCH",
            headers: {
                "X-API-KEY": await core.Supplier.get(this.options.apiKey),
            },
            body: await serializers.model.update.Request.json({
                providerApiKeys: request.providerApiKeys,
            }),
        });
        if (_response.ok) {
            return await serializers.model.update.Response.parse(
                _response.body as serializers.model.update.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HumanloopApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HumanloopApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HumanloopApiTimeoutError();
            case "unknown":
                throw new errors.HumanloopApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
