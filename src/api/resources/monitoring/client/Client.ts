/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core";
import { HumanloopApi } from "@fern-api/humanloop";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Client {
    interface Options {
        environment: string;
        token?: core.Supplier<core.BearerToken>;
    }
}

export class Client {
    constructor(private readonly options: Client.Options) {}

    /**
     * Retrieve paginated logs from the server. Sorting and filtering are supported through query params. See docstring of get_sorted_filtered_project_data_from_query_params for more details.
     */
    public async getLogs(request: HumanloopApi.GetLogsRequest): Promise<HumanloopApi.LogsPage> {
        const _queryParams = new URLSearchParams();
        _queryParams.append("project_id", request.projectId);
        if (request.search != null) {
            _queryParams.append("search", request.search);
        }

        if (request.metadataSearch != null) {
            _queryParams.append("metadata_search", request.metadataSearch);
        }

        if (request.startDate != null) {
            _queryParams.append("start_date", request.startDate);
        }

        if (request.endDate != null) {
            _queryParams.append("end_date", request.endDate);
        }

        if (request.size != null) {
            _queryParams.append("size", request.size.toString());
        }

        if (request.page != null) {
            _queryParams.append("page", request.page.toString());
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "logs"),
            method: "GET",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.monitoring.getLogs.Response.parse(
                _response.body as serializers.monitoring.getLogs.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HumanloopApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HumanloopApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HumanloopApiTimeoutError();
            case "unknown":
                throw new errors.HumanloopApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async deleteLogs(): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "logs"),
            method: "DELETE",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HumanloopApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HumanloopApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HumanloopApiTimeoutError();
            case "unknown":
                throw new errors.HumanloopApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Retrieve filtered logs in a normalized CSV. Sorting and filtering are supported through query params. See docstring of get_sorted_filtered_project_data_from_query_params for more details.
     */
    public async exportRawLogs(request: HumanloopApi.ExportRawLogsRequest): Promise<void> {
        const _queryParams = new URLSearchParams();
        _queryParams.append("project_id", request.projectId);
        if (request.search != null) {
            _queryParams.append("search", request.search);
        }

        if (request.metadataSearch != null) {
            _queryParams.append("metadata_search", request.metadataSearch);
        }

        if (request.startDate != null) {
            _queryParams.append("start_date", request.startDate);
        }

        if (request.endDate != null) {
            _queryParams.append("end_date", request.endDate);
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "logs/export-raw"),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HumanloopApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HumanloopApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HumanloopApiTimeoutError();
            case "unknown":
                throw new errors.HumanloopApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Retrieve filtered logs in the format for fine-tuning. Sorting and filtering are supported through query params. See docstring of get_sorted_filtered_project_data_from_query_params for more details.
     */
    public async exportFineTuneLogs(request: HumanloopApi.ExportFineTuneLogsRequest): Promise<void> {
        const _queryParams = new URLSearchParams();
        _queryParams.append("project_id", request.projectId);
        if (request.search != null) {
            _queryParams.append("search", request.search);
        }

        if (request.metadataSearch != null) {
            _queryParams.append("metadata_search", request.metadataSearch);
        }

        if (request.startDate != null) {
            _queryParams.append("start_date", request.startDate);
        }

        if (request.endDate != null) {
            _queryParams.append("end_date", request.endDate);
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "logs/export-fine-tune"),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            queryParameters: _queryParams,
            body: await serializers.monitoring.exportFineTuneLogs.Request.json(request.body),
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HumanloopApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HumanloopApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HumanloopApiTimeoutError();
            case "unknown":
                throw new errors.HumanloopApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async deleteFeedbackLabel(projectId: string, feedbackType: string, feedbackValue: string): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `projects/${projectId}/feedback/${feedbackType}/${feedbackValue}`),
            method: "DELETE",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HumanloopApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HumanloopApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HumanloopApiTimeoutError();
            case "unknown":
                throw new errors.HumanloopApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
