/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core";
import { HumanloopApi } from "@fern-api/humanloop";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Client {
    interface Options {
        environment: string;
        token?: core.Supplier<core.BearerToken>;
    }
}

export class Client {
    constructor(private readonly options: Client.Options) {}

    /**
     * Get dataset details and associated field meta-data for any data-sets associated to your user.
     */
    public async getAll(): Promise<HumanloopApi.Dataset[]> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/datasets"),
            method: "GET",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return await serializers.dataset.getAll.Response.parse(
                _response.body as serializers.dataset.getAll.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HumanloopApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HumanloopApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HumanloopApiTimeoutError();
            case "unknown":
                throw new errors.HumanloopApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Upload a dataset that you can use in your Humanloop projects to train models.
     */
    public async create(request: HumanloopApi.CreateDatasetRequest): Promise<HumanloopApi.UpdateDatasetResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/datasets"),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            body: await serializers.dataset.create.Request.json({
                name: request.name,
                data: request.data,
                fields: request.fields,
                description: request.description,
            }),
        });
        if (_response.ok) {
            return await serializers.dataset.create.Response.parse(
                _response.body as serializers.dataset.create.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HumanloopApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HumanloopApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HumanloopApiTimeoutError();
            case "unknown":
                throw new errors.HumanloopApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Get dataset details and associated field meta-data for a specific data-set associated to your user.
     */
    public async get(id: number, request?: HumanloopApi.GetDatasetRequest): Promise<HumanloopApi.Dataset> {
        const _queryParams = new URLSearchParams();
        if (request?.numRecords != null) {
            _queryParams.append("num_records", request?.numRecords.toString());
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `/datasets/${id}`),
            method: "GET",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.dataset.get.Response.parse(_response.body as serializers.dataset.get.Response.Raw);
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HumanloopApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HumanloopApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HumanloopApiTimeoutError();
            case "unknown":
                throw new errors.HumanloopApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Update an existing dataset by adding additional data points.
     */
    public async update(
        id: number,
        request: HumanloopApi.UpdateDatasetRequest
    ): Promise<HumanloopApi.UpdateDatasetResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `/datasets/${id}`),
            method: "PUT",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            body: await serializers.dataset.update.Request.json({
                data: request.data,
            }),
        });
        if (_response.ok) {
            return await serializers.dataset.update.Response.parse(
                _response.body as serializers.dataset.update.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HumanloopApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HumanloopApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HumanloopApiTimeoutError();
            case "unknown":
                throw new errors.HumanloopApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Delete your dataset if it is no longer needed.
     */
    public async delete(id: number): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `/datasets/${id}`),
            method: "DELETE",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HumanloopApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HumanloopApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HumanloopApiTimeoutError();
            case "unknown":
                throw new errors.HumanloopApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Update the details of your dataset such as its name and description.
     */
    public async updateDetails(
        id: number,
        request?: HumanloopApi.UpdateDatasetDetailsRequest
    ): Promise<HumanloopApi.Dataset> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `/datasets/${id}/metadata`),
            method: "PUT",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            body: await serializers.dataset.updateDetails.Request.json({
                name: request?.name,
                description: request?.description,
            }),
        });
        if (_response.ok) {
            return await serializers.dataset.updateDetails.Response.parse(
                _response.body as serializers.dataset.updateDetails.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HumanloopApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HumanloopApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HumanloopApiTimeoutError();
            case "unknown":
                throw new errors.HumanloopApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
