/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { HumanloopApi } from "@fern-api/humanloop";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Client {
    interface Options {
        environment?: environments.HumanloopApiEnvironment | string;
        apiKey?: core.Supplier<string>;
    }
}

export class Client {
    constructor(private readonly options: Client.Options) {}

    public async getAll(projectId: string): Promise<HumanloopApi.DataSnapshot[]> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.HumanloopApiEnvironment.Production,
                `/projects/${projectId}/data-snapshots/`
            ),
            method: "GET",
            headers: {
                "X-API-KEY": await core.Supplier.get(this.options.apiKey),
            },
        });
        if (_response.ok) {
            return await serializers.dataSnapshot.getAll.Response.parse(
                _response.body as serializers.dataSnapshot.getAll.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HumanloopApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HumanloopApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HumanloopApiTimeoutError();
            case "unknown":
                throw new errors.HumanloopApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async create(projectId: string, request: HumanloopApi.CreateDataSnapshotRequest): Promise<void> {
        const _queryParams = new URLSearchParams();
        if (request.search != null) {
            _queryParams.append("search", request.search);
        }

        if (request.metadataSearch != null) {
            _queryParams.append("metadata_search", request.metadataSearch);
        }

        if (request.startDate != null) {
            _queryParams.append("start_date", request.startDate);
        }

        if (request.endDate != null) {
            _queryParams.append("end_date", request.endDate);
        }

        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.HumanloopApiEnvironment.Production,
                `/projects/${projectId}/data-snapshots/`
            ),
            method: "POST",
            headers: {
                "X-API-KEY": await core.Supplier.get(this.options.apiKey),
            },
            queryParameters: _queryParams,
            body: await serializers.dataSnapshot.create.Request.json({
                name: request.name,
                description: request.description,
            }),
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HumanloopApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HumanloopApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HumanloopApiTimeoutError();
            case "unknown":
                throw new errors.HumanloopApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async update(
        projectId: string,
        dataSnapshotId: string,
        request?: HumanloopApi.UpdateDataSnapshotRequest
    ): Promise<HumanloopApi.DataSnapshot> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.HumanloopApiEnvironment.Production,
                `/projects/${projectId}/data-snapshots//${dataSnapshotId}`
            ),
            method: "PATCH",
            headers: {
                "X-API-KEY": await core.Supplier.get(this.options.apiKey),
            },
            body: await serializers.dataSnapshot.update.Request.json({
                name: request?.name,
                description: request?.description,
            }),
        });
        if (_response.ok) {
            return await serializers.dataSnapshot.update.Response.parse(
                _response.body as serializers.dataSnapshot.update.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HumanloopApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HumanloopApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HumanloopApiTimeoutError();
            case "unknown":
                throw new errors.HumanloopApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
