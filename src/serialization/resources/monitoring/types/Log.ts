/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import { HumanloopApi } from "@fern-api/humanloop";
import * as core from "../../../../core";

export const Log: core.serialization.ObjectSchema<serializers.Log.Raw, HumanloopApi.Log> = core.serialization.object({
    id: core.serialization.string(),
    source: core.serialization.string().optional(),
    modelConfig: core.serialization.property(
        "model_config",
        core.serialization.lazyObject(async () => (await import("../../..")).ProjectModelConfig).optional()
    ),
    output: core.serialization.string(),
    feedback: core.serialization
        .list(core.serialization.lazyObject(async () => (await import("../../..")).Feedback))
        .optional(),
    metricValues: core.serialization.property(
        "metric_values",
        core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../..")).MetricValues))
            .optional()
    ),
    dataSnapshots: core.serialization.property(
        "data_snapshots",
        core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../..")).LogDataSnapshot))
            .optional()
    ),
    providerLatency: core.serialization.property("provider_latency", core.serialization.number().optional()),
    createdAt: core.serialization.property("created_at", core.serialization.string()),
    updatedAt: core.serialization.property("updated_at", core.serialization.string()),
});

export declare namespace Log {
    interface Raw {
        id: string;
        source?: string | null;
        model_config?: serializers.ProjectModelConfig.Raw | null;
        output: string;
        feedback?: serializers.Feedback.Raw[] | null;
        metric_values?: serializers.MetricValues.Raw[] | null;
        data_snapshots?: serializers.LogDataSnapshot.Raw[] | null;
        provider_latency?: number | null;
        created_at: string;
        updated_at: string;
    }
}
